'use strict';

const Redlock = require('redlock-async');

const DEFAULT_OPTIONS = {
    driftFactor: 0.01,
    retryCount: 300,
    retryDelay: 50,
    retryJitter: 25,
};

module.exports = RedlockWrapper;

function RedlockWrapper(redisClients, options) {
    if (!Array.isArray(redisClients)) {
        redisClients = [redisClients];
    }

    options = Object.assign(DEFAULT_OPTIONS, options);
    options.logger = options.logger || Object.assign({}, console, {fatal: console.error});
    options.error = options.error || options.logger.error;

    this._options = options;
    this._redlock = new Redlock(redisClients, options);

    this._redlock.on('clientError', options.error);
}

RedlockWrapper.prototype.lock = async function(resource, ttl, fn) {
    if (typeof ttl === 'function' && fn === undefined) {
        if (!this._options.defaultTtl) {
            throw new Error('Redlock: No default TTL specified');
        }

        fn = ttl;
        ttl = this._options.defaultTtl;
    }

    const lock = await this._redlock.lock(resource, ttl);

    try {
        const result = await fn(lock);

        await _unlock.call(this, lock);

        return result;
    } catch (error) {
        await _unlock.call(this, lock);

        throw error;
    }

    async function _unlock(lock) {
        try {
            await lock.unlock();
        } catch (err) {
            this._options.error(err);
            this._options.logger.error('Failed to unlock resource - retrying unlock');

            return lock.unlock();
        }
    }
};
